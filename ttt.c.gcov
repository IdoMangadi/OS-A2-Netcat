        -:    0:Source:ttt.c
        -:    0:Graph:ttt.gcno
        -:    0:Data:ttt.gcda
        -:    0:Runs:128
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:#include <ctype.h>
        -:    5:
        -:    6:#define BUFFER_SIZE 4096
        -:    7:/**
        -:    8: * function to check if some side won the game in a given board.
        -:    9: * returns: 0 for no one, 1 for player 1 and 2 for player 2.
        -:   10:*/
      659:   11:size_t hou_won_ttt(size_t board[3][3]){
        -:   12:    // Check rows and columns
     2477:   13:    for (size_t i = 0; i < 3; i++) {
     1874:   14:        if (board[i][0] != 0 && board[i][0] == board[i][1] && board[i][0] == board[i][2]) {
       18:   15:            return board[i][0];
        -:   16:        }
     1856:   17:        if (board[0][i] != 0 && board[0][i] == board[1][i] && board[0][i] == board[2][i]) {
       38:   18:            return board[0][i];
        -:   19:        }
        -:   20:    }
        -:   21:
        -:   22:    // Check diagonals
      603:   23:    if (board[0][0] != 0 && board[0][0] == board[1][1] && board[0][0] == board[2][2]) {
       11:   24:        return board[0][0];
        -:   25:    }
      592:   26:    if (board[0][2] != 0 && board[0][2] == board[1][1] && board[0][2] == board[2][0]) {
       15:   27:        return board[0][2];
        -:   28:    }
        -:   29:
        -:   30:    // If no winner found, return 0 (no one)
      577:   31:    return 0;
        -:   32:}
        -:   33:
        -:   34:/**
        -:   35: * This function prints the noard into the string BUFFER.
        -:   36:*/
      733:   37:void board_printing_ttt(size_t board[3][3], char* buffer){
     2932:   38:    for(size_t i=0; i<3; i++){
     2199:   39:        sprintf(buffer+strlen(buffer),"[%zu] [%zu] [%zu]\n", board[i][0], board[i][1], board[i][2]);
        -:   40:    }
      733:   41:    sprintf(buffer+strlen(buffer),"\n");
        -:   42:    // fflush(stdout);
      733:   43:}
        -:   44:
      128:   45:int main(int argc, char *argv[]) {
        -:   46:
        -:   47:    // Argument handling:
      128:   48:    if (argc != 2 || strlen(argv[1]) != 9) {
       21:   49:        fprintf(stderr, "Invalid argument!\n");
       21:   50:        return 1;
        -:   51:    }
        -:   52:
      107:   53:    int digit_count[10] = {0};
      107:   54:    char *sai_input = argv[1];
        -:   55:
     1066:   56:    for (int i = 0; i < 9; i++) {
        -:   57:        // argument contain non-digit char || argument contain 0 || argument contain the same digit twice
      963:   58:        if (!isdigit(sai_input[i]) || sai_input[i] == '0' || ++digit_count[sai_input[i] - '0'] > 1) {
        4:   59:            fprintf(stderr, "Invalid argument!\n");
        4:   60:            fflush(stderr);
        4:   61:            return 1;
        -:   62:        }
        -:   63:    }
        -:   64:
        -:   65:    // game handling:
      103:   66:    size_t board[3][3] = {0};  // with: 1 = sai , 2 = human user
        -:   67:
      103:   68:    size_t sai_pointer = 0;  // represent the 'stuped ai' current strategy
        -:   69:    size_t sai_curr_digit;
        -:   70:    char user_input;
        -:   71:
        -:   72:    size_t row;
        -:   73:    size_t col;
        -:   74:
      103:   75:    size_t turn = 1;
        -:   76:    char buffer[BUFFER_SIZE];
      103:   77:    memset(buffer, 0, BUFFER_SIZE);
        -:   78:
        -:   79:    // printf("Welcome to Ai tic-tac-toe game\n");
        -:   80:    // char opening[1024];
        -:   81:    // if(scanf)
        -:   82:
      680:   83:    for(size_t i=0; i<9; i++){  // loop over the turns of human and sai user
        -:   84:
      665:   85:        if(turn == 1){  // sai turn:
        -:   86:            
        -:   87:            do{
      527:   88:                sai_curr_digit = sai_input[sai_pointer++] - '0' -1; // extracting the digit from the char (-1 for row and col calculation, starts from 1).
      527:   89:                row = sai_curr_digit / 3;
      527:   90:                col = sai_curr_digit % 3;
      527:   91:            } while(board[row][col]);  // as long as the position is already taken
        -:   92:
      365:   93:            board[row][col] = 1;  // performig sai move
      365:   94:            sprintf(buffer+strlen(buffer), "sai move: %zu\n", sai_curr_digit+1);
        -:   95:        }
        -:   96:
        -:   97:        else{  // user turn:
      300:   98:            int first = 1;
      300:   99:            memset(buffer, 0, BUFFER_SIZE);
        -:  100:            do{
      374:  101:                 if(!first){
        -:  102:                    char nv_buffer[256];  // creating not valid response
       74:  103:                    memset(nv_buffer, 0, 256);
       74:  104:                    sprintf(nv_buffer, "NOT A VALID MOVE!\n");  // not valid msg
       74:  105:                    board_printing_ttt(board, nv_buffer);  // appending board
       74:  106:                    printf("%s", nv_buffer);  // printing not valid msg and board
       74:  107:                    fflush(stdout);
        -:  108:                }
        -:  109:                // scaning user input:
        -:  110:                // printf("Your choice: ");
      374:  111:                if(scanf(" %c", &user_input) == -1){
        6:  112:                    fprintf(stderr, "scanf error\n");
        6:  113:                    return 1;
        -:  114:                }
      368:  115:                row = (size_t)(user_input-'0'-1) / 3;
      368:  116:                col = (size_t)(user_input-'0'-1) % 3;
      368:  117:                first = 0;
        -:  118:               
        -:  119:            // while(user input is not a digit || position in that place already taken):
      368:  120:            } while(user_input < '1' || user_input > '9' || board[row][col]);  // assuming the third condition will not be evaluated if the first two will return true.
        -:  121:            
      294:  122:            board[row][col] = 2;  // performig user move
        -:  123:            // fflush(stdout);
        -:  124:        }
        -:  125:
      659:  126:        board_printing_ttt(board, buffer);
        -:  127:
        -:  128:        // victory check:
      659:  129:        size_t winner = hou_won_ttt(board);
      659:  130:        if(winner == 1){  // means sai won
       50:  131:            sprintf(buffer+strlen(buffer), "I won! lunar deportation starting!\n");
        -:  132:            // fflush(stdout);
        -:  133:            // return 0;
        -:  134:        }
      659:  135:        if(winner == 2){  // means user won
       32:  136:            sprintf(buffer+strlen(buffer), "I lost... lunar deportation will be executed in some advance version of me...\n");
        -:  137:            //fflush(stdout);
        -:  138:            // return 0;
        -:  139:        }
        -:  140:
      659:  141:        if(turn == 1 || winner != 0){ // sai move or winning scenario
      397:  142:            printf("%s", buffer);
      397:  143:            fflush(stdout);
      397:  144:            if (winner != 0) return 0;
        -:  145:        } 
        -:  146:
        -:  147:        // turns updating:
      577:  148:        turn = (turn == 1) ? 2 : 1;
        -:  149:
        -:  150:    }
        -:  151:
       15:  152:    sprintf(buffer+strlen(buffer), "Draw\n");
       15:  153:    printf("%s", buffer);
       15:  154:    fflush(stdout);
       15:  155:    return 0;
        -:  156:}
