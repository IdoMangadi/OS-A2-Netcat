        -:    0:Source:mynetcat.c
        -:    0:Graph:mync-mynetcat.gcno
        -:    0:Data:mync-mynetcat.gcda
        -:    0:Runs:59
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <unistd.h>
        -:    4:#include <string.h>
        -:    5:#include <getopt.h>
        -:    6:#include <arpa/inet.h>
        -:    7:#include <sys/types.h>
        -:    8:#include <sys/socket.h>
        -:    9:#include <netdb.h>
        -:   10:#include <sys/time.h>
        -:   11:#include <signal.h>
        -:   12:#include <sys/un.h>
        -:   13:
        -:   14:#define BUFFER_SIZE 2048  // buffer size for the messages
        -:   15:#define TO_SEC 4  // timeout in seconds
        -:   16:#define TO_MIC 0 // timeout in microseconds
        -:   17:
        -:   18:int fds[4] = {-1, -1, -1, -1};  // array to hold the fds 
        -:   19:int fds_size = 0;  // size of the fds array
        -:   20:char unix_path[100];  // path for the unix domain socket
        -:   21:
        -:   22:/**
        -:   23: * closing all the fds in the fds array, and unlink the unix domain socket if it was created.
        -:   24:*/
       51:   25:void close_fds(int fds[], size_t size, int EXIT_CODE)
        -:   26:{
      243:   27:    for (int i = 0; i < size; i++)
        -:   28:    {
     192*:   29:        if (fds[i] > -1) close(fds[i]);
        -:   30:    }
        -:   31:    if (unix_path != NULL)
        -:   32:    {
       51:   33:        unlink(unix_path);
        -:   34:    }
       51:   35:    exit(EXIT_CODE);
        -:   36:}
        -:   37:
        -:   38:/**
        -:   39: * generating tcp socket, operates: socket, bind, listen and accept.
        -:   40: * NOTE: blocking function. ends ready to receive data from connected client.
        -:   41: */
       15:   42:void start_tcp_server(int *server_fd, int *client_fd, int port)
        -:   43:{
        -:   44:    // creating the socket
        -:   45:    struct sockaddr_in server_addr, client_addr;
       15:   46:    socklen_t client_len = sizeof(client_addr);
       15:   47:    printf("starting tcp server\n");
       15:   48:    *server_fd = socket(AF_INET, SOCK_STREAM, 0); // creating the socket on the given io fd
       15:   49:    if (*server_fd < 0)
        -:   50:    {
    #####:   51:        perror("socket");
    #####:   52:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:   53:    }
       15:   54:    server_addr.sin_family = AF_INET;
       15:   55:    server_addr.sin_addr.s_addr = INADDR_ANY;
       15:   56:    server_addr.sin_port = htons(port);
       15:   57:    printf("binding server\n");
       15:   58:    if (bind(*server_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0)
        -:   59:    {
        4:   60:        perror("bind");
        4:   61:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:   62:    }
       11:   63:    printf("server is listening\n");
       11:   64:    if (listen(*server_fd, 1) < 0)
        -:   65:    {
    #####:   66:        perror("listen");
    #####:   67:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:   68:    }
        -:   69:
       11:   70:    *client_fd = accept(*server_fd, (struct sockaddr *)&client_addr, &client_len);
       11:   71:    if (*client_fd < 0)
        -:   72:    {
    #####:   73:        perror("accept");
    #####:   74:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:   75:    }
       11:   76:    printf("client accepted!\n");
       11:   77:}
        -:   78:
        -:   79:/**
        -:   80: * handling the alarm signal, and printing a message.
        -:   81:*/
        1:   82:void handle_alarm(int sig)
        -:   83:{
        1:   84:    fprintf(stderr, "timeout reached\n");
        1:   85:    close_fds(fds, fds_size, EXIT_FAILURE);
    #####:   86:}
        -:   87:
        -:   88:/**
        -:   89: * generating Unix Domain Socket Client Stream, operates: socket, connect.
        -:   90:*/
        4:   91:void start_udsc_datagram(int *client_fd, char *socket_path) // open Unix Domain Socket Client Datagram, and save the fd in client_fd
        -:   92:{
        -:   93:    struct sockaddr_un server_addr;
        4:   94:    printf("starting unix domain socket client over datagram\n");
        4:   95:    *client_fd = socket(AF_UNIX, SOCK_DGRAM, 0); // creating the socket on the given io fd
        4:   96:    if (*client_fd < 0)
        -:   97:    {
    #####:   98:        perror("socket");
    #####:   99:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  100:    }
        4:  101:    server_addr.sun_family = AF_UNIX;
        4:  102:    strcpy(server_addr.sun_path, socket_path);
        4:  103:    if (connect(*client_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0)
        -:  104:    {
        2:  105:        perror("connect");
        2:  106:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  107:    }
        2:  108:    printf("connected to the server\n");
        2:  109:}
        -:  110:
        -:  111:/**
        -:  112: * generating Unix Domain Socket Server Datagram, operates: socket, bind, connect.
        -:  113:*/
        2:  114:void start_udss_datagram(int *server_fd, char *socket_path) // open Unix Domain Socket Server Datagram, and save the fd in server_fd
        -:  115:{
        -:  116:    struct sockaddr_un server_addr;
        -:  117:    struct sockaddr_un client_addr;
        2:  118:    bzero((char *)&client_addr, sizeof(client_addr));
        2:  119:    bzero((char *)&server_addr, sizeof(server_addr));
        2:  120:    socklen_t client_len = sizeof(client_addr);
        2:  121:    printf("starting unix domain socket server over datagram\n");
        2:  122:    *server_fd = socket(AF_UNIX, SOCK_DGRAM, 0); // creating the socket on the given io fd
        2:  123:    if (*server_fd < 0)
        -:  124:    {
    #####:  125:        perror("socket");
    #####:  126:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  127:    }
        2:  128:    server_addr.sun_family = AF_UNIX;
        2:  129:    unlink(socket_path);  // unlink the socket path
        -:  130:
        2:  131:    strcpy(server_addr.sun_path, socket_path);
        2:  132:    if (bind(*server_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0)
        -:  133:    {
    #####:  134:        perror("bind");
    #####:  135:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  136:    }
        2:  137:    if (connect(*server_fd, (struct sockaddr *)&client_addr, client_len) == -1)
        -:  138:    { // connecting to the client, so we can use send and recv instead of sendto and recvfrom
    #####:  139:        perror("connect");
    #####:  140:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  141:    }
        2:  142:}
        -:  143:
        -:  144:/**
        -:  145: * generating Unix Domain Socket Client Stream, operates: socket, connect.
        -:  146:*/
        8:  147:void start_udsc_stream(int *client_fd, char *socket_path) // open Unix Domain Socket Client Stream, and save the fd in client_fd
        -:  148:{
        -:  149:    struct sockaddr_un server_addr;
        8:  150:    printf("starting unix domain socket client over stream\n");
        8:  151:    *client_fd = socket(AF_UNIX, SOCK_STREAM, 0); // creating the socket on the given io fd
        8:  152:    if (*client_fd < 0)
        -:  153:    {
    #####:  154:        perror("socket");
    #####:  155:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  156:    }
        8:  157:    server_addr.sun_family = AF_UNIX;
        8:  158:    strcpy(server_addr.sun_path, socket_path);
        8:  159:    if (connect(*client_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0)
        -:  160:    {
        3:  161:        perror("connect");
        3:  162:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  163:    }
        5:  164:}
        -:  165:
        -:  166:/**
        -:  167: * generating Unix Domain Socket Server Stream, operates: socket, bind, listen, accept.
        -:  168: * NOTE: blocking function. ends ready to receive data from connected client.
        -:  169:*/
        5:  170:void start_udss_stream(int *server_fd, int *client_fd, char *socket_path) // open Unix Domain Socket Server Stream, and save the fd in server_fd
        -:  171:{
        -:  172:    struct sockaddr_un server_addr, client_addr;
        5:  173:    socklen_t client_len = sizeof(client_addr);
        5:  174:    printf("starting unix domain socket server over stream\n");
        5:  175:    *server_fd = socket(AF_UNIX, SOCK_STREAM, 0); // creating the socket on the given io fd
        5:  176:    if (*server_fd < 0)
        -:  177:    {
    #####:  178:        perror("socket");
    #####:  179:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  180:    }
        5:  181:    server_addr.sun_family = AF_UNIX;
        5:  182:    unlink(socket_path);
        5:  183:    strcpy(server_addr.sun_path, socket_path);
        5:  184:    if (bind(*server_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0)
        -:  185:    {
    #####:  186:        perror("bind");
    #####:  187:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  188:    }
        5:  189:    if (listen(*server_fd, 1) < 0)
        -:  190:    {
    #####:  191:        perror("listen");
    #####:  192:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  193:    }
        5:  194:    *client_fd = accept(*server_fd, (struct sockaddr *)&client_addr, &client_len);
        5:  195:    if (*client_fd < 0)
        -:  196:    {
    #####:  197:        perror("accept");
    #####:  198:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  199:    }
        5:  200:    printf("client accepted!\n");
        5:  201:}
        -:  202:
        -:  203:/**
        -:  204: * generating tcp client.
        -:  205: * ends with connected client ready to send data.
        -:  206: */
       11:  207:void start_tcp_client(int *client_fd, char *hostname, int port)
        -:  208:{
        -:  209:    struct sockaddr_in server_addr;
        -:  210:    struct hostent *server;
       11:  211:    printf("starting tcp client\n");
       11:  212:    *client_fd = socket(AF_INET, SOCK_STREAM, 0); // creating the socket on the given io fd
       11:  213:    if (*client_fd < 0)
        -:  214:    {
    #####:  215:        perror("socket");
    #####:  216:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  217:    }
        -:  218:
       11:  219:    server = gethostbyname(hostname);
       11:  220:    if (server == NULL)
        -:  221:    {
    #####:  222:        fprintf(stderr, "ERROR, no such host\n");
    #####:  223:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  224:    }
        -:  225:
       11:  226:    bzero((char *)&server_addr, sizeof(server_addr));
       11:  227:    server_addr.sin_family = AF_INET;
       11:  228:    bcopy((char *)server->h_addr_list[0], (char *)&server_addr.sin_addr.s_addr, server->h_length);
       11:  229:    server_addr.sin_port = htons(port);
       11:  230:    printf("connecting to the tcp server\n");
       11:  231:    if (connect(*client_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0)
        -:  232:    {
        2:  233:        perror("connect");
        2:  234:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  235:    }
        9:  236:}
        -:  237:
        -:  238:/**
        -:  239: * generating udp server.
        -:  240:*/
        1:  241:void start_udp_server(int *server_fd, int port)
        -:  242:{
        -:  243:
        -:  244:    struct sockaddr_in server_addr, client_addr;
        1:  245:    socklen_t client_len = sizeof(client_addr);
        1:  246:    printf("starting udp server\n");
        1:  247:    *server_fd = socket(AF_INET, SOCK_DGRAM, 0); // creating the socket on the given io fd
        1:  248:    if (*server_fd < 0)
        -:  249:    {
    #####:  250:        perror("socket");
    #####:  251:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  252:    }
        1:  253:    int optval = 1;
        1:  254:    if (setsockopt(*server_fd, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval)) == -1)
        -:  255:    {
    #####:  256:        perror("setsockopt");
    #####:  257:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  258:    }
        1:  259:    server_addr.sin_family = AF_INET;
        1:  260:    server_addr.sin_addr.s_addr = INADDR_ANY;
        1:  261:    server_addr.sin_port = htons(port);
        1:  262:    printf("binding server\n");
        1:  263:    if (bind(*server_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0)
        -:  264:    {
    #####:  265:        perror("bind");
    #####:  266:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  267:    }
        -:  268:    char buffer[BUFFER_SIZE];
        1:  269:    size_t bytes_recv = recvfrom(*server_fd, buffer, BUFFER_SIZE, 0, (struct sockaddr *)&client_addr, &client_len);
        -:  270:    if (bytes_recv < 0)
        -:  271:    {
        -:  272:        perror("recvfrom");
        -:  273:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  274:    }
        1:  275:    if (connect(*server_fd, (struct sockaddr *)&client_addr, client_len) == -1)
        -:  276:    { // connecting to the client, so we can use send and recv instead of sendto and recvfrom
    #####:  277:        perror("connect");
    #####:  278:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  279:    }
        1:  280:}
        -:  281:
        -:  282:/**
        -:  283: * generating udp client.
        -:  284: * NOTE: ends with connected client ready to send data.
        -:  285:*/
        1:  286:void start_udp_client(int *client_fd, char *hostname, int port)
        -:  287:{
        -:  288:    struct sockaddr_in server_addr;
        -:  289:    struct hostent *server;
        1:  290:    printf("starting udp client\n");
        1:  291:    *client_fd = socket(AF_INET, SOCK_DGRAM, 0); // creating the socket on the given io fd
        1:  292:    if (*client_fd < 0)
        -:  293:    {
    #####:  294:        perror("socket");
    #####:  295:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  296:    }
        -:  297:
        1:  298:    server = gethostbyname(hostname);
        1:  299:    if (server == NULL)
        -:  300:    {
    #####:  301:        fprintf(stderr, "ERROR, no such host\n");
    #####:  302:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  303:    }
        -:  304:
        1:  305:    bzero((char *)&server_addr, sizeof(server_addr));
        1:  306:    server_addr.sin_family = AF_INET;
        1:  307:    bcopy((char *)server->h_addr_list[0], (char *)&server_addr.sin_addr.s_addr, server->h_length);
        1:  308:    server_addr.sin_port = htons(port);
        1:  309:    printf("connecting to the udp server\n");
        1:  310:    char *buffer = "hello, I am the client, I am ready to send you some";
        1:  311:    if (sendto(*client_fd, buffer, BUFFER_SIZE, 0, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0)
        -:  312:    {
    #####:  313:        perror("sendto");
    #####:  314:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  315:    }
        1:  316:    if (connect(*client_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0)
        -:  317:    {
    #####:  318:        perror("connect");
    #####:  319:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  320:    }
        1:  321:}
        -:  322:
        -:  323:/**
        -:  324: * handling the input arguments, and starting the appropriate server/client.
        -:  325:*/
       36:  326:void handle_i_args(char *input_mode, int *input_fd, int *tcp_server_in_fd)
        -:  327:{
       36:  328:    if (strncmp(input_mode, "TCPS", 4) == 0)
        -:  329:    { // handling tcp server:
       10:  330:        int port = atoi(input_mode + 4);
       10:  331:        start_tcp_server(tcp_server_in_fd, input_fd, port); // input_fd will hold the socket returned from 'accept' (the current client socket as the server side).
        7:  332:        printf("start tcp server returned\n");
        -:  333:    }
       26:  334:    else if (strncmp(input_mode, "TCPC", 4) == 0)
        -:  335:    { // handling tcp client:
       10:  336:        char *hostname = strtok(input_mode + 4, ",");
       10:  337:        int port = atoi(strtok(NULL, ","));
       10:  338:        printf("hostname: %s, port: %d\n", hostname, port);
       10:  339:        start_tcp_client(input_fd, hostname, port); // means that the incomming messages from server will be throw input_fd.
        -:  340:    }
       16:  341:    else if (strncmp(input_mode, "UDPS", 4) == 0)
        -:  342:    { // handling udp server:
        1:  343:        int port = atoi(input_mode + 4);
        1:  344:        start_udp_server(input_fd, port); // input_fd will hold the socket returned from 'accept' (the current client socket as the server side).
        1:  345:        printf("start udp server returned\n");
        -:  346:    }
       15:  347:    else if (strncmp(input_mode, "UDSSD", 5) == 0)
        -:  348:    { // handling Unix Domain Socket server over datagram
        2:  349:        char *socket_path = input_mode + 5;
        2:  350:        strcpy(unix_path, socket_path);
        -:  351:
        2:  352:        printf("socket path: %s\n", socket_path);
        2:  353:        start_udss_datagram(input_fd, socket_path);
        -:  354:    }
       13:  355:    else if (strncmp(input_mode, "UDSCS", 5) == 0)
        -:  356:    { // handling Unix Domain Socket client over stream
        7:  357:        char *socket_path = input_mode + 5;
        7:  358:        strcpy(unix_path, socket_path);
        -:  359:
        7:  360:        printf("socket path: %s\n", socket_path);
        7:  361:        start_udsc_stream(input_fd, socket_path);
        -:  362:    }
        6:  363:    else if (strncmp(input_mode, "UDSSS", 5) == 0)
        -:  364:    {
        4:  365:        char *socket_path = input_mode + 5;
        4:  366:        strcpy(unix_path, socket_path);
        -:  367:
        4:  368:        printf("socket path: %s\n", socket_path);
        4:  369:        start_udss_stream(tcp_server_in_fd, input_fd, socket_path);
        -:  370:    }
        -:  371:    else
        -:  372:    {
        2:  373:        printf("Not a valid argument for input mode\n");
        2:  374:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  375:    }
       27:  376:}
        -:  377:
        -:  378:/**
        -:  379: * handling the output arguments, and starting the appropriate server/client.
        -:  380:*/
       14:  381:void handle_o_args(char *output_mode, int *output_fd, int *tcp_server_out_fd)
        -:  382:{
       14:  383:    if (strncmp(output_mode, "TCPS", 4) == 0)
        -:  384:    { // handling tcp server:
        5:  385:        int port = atoi(output_mode + 4);
        5:  386:        start_tcp_server(tcp_server_out_fd, output_fd, port); // output_fd will hold the socket returned from 'accept' (the current client socket as the server side).
        -:  387:        // printf("start tcp server returned\n");
        -:  388:    }
        9:  389:    else if (strncmp(output_mode, "TCPC", 4) == 0)
        -:  390:    { // handling tcp client:
        1:  391:        char *hostname = strtok(output_mode + 4, ",");
        1:  392:        int port = atoi(strtok(NULL, ","));
        1:  393:        printf("hostname: %s, port: %d\n", hostname, port);
        1:  394:        start_tcp_client(output_fd, hostname, port); // means that the incomming messages from server will be throw output_fd.
        -:  395:    }
        8:  396:    else if (strncmp(output_mode, "UDPC", 4) == 0)
        -:  397:    { // handling udp client:
        1:  398:        char *hostname = strtok(output_mode + 4, ",");
        1:  399:        int port = atoi(strtok(NULL, ","));
        1:  400:        printf("hostname: %s, port: %d\n", hostname, port);
        1:  401:        start_udp_client(output_fd, hostname, port); // means that the incomming messages from server will be throw output_fd.
        -:  402:    }
        7:  403:    else if (strncmp(output_mode, "UDSCD", 5) == 0)
        -:  404:    { // handling Unix Domain Socket client over datagram
        4:  405:        char *socket_path = output_mode + 5;
        4:  406:        strcpy(unix_path, socket_path);
        4:  407:        printf("socket path: %s\n", socket_path);
        4:  408:        start_udsc_datagram(output_fd, socket_path);
        -:  409:    }
        3:  410:    else if (strncmp(output_mode, "UDSSS", 5) == 0)
        -:  411:    { // handling Unix Domain Socket client over datagram
        1:  412:        char *socket_path = output_mode + 5;
        1:  413:        strcpy(unix_path, socket_path);
        1:  414:        printf("socket path: %s\n", socket_path);
        1:  415:        start_udss_stream(tcp_server_out_fd, output_fd, socket_path);
        -:  416:    }
        2:  417:    else if (strncmp(output_mode, "UDSCS", 5) == 0)
        -:  418:    { // handling Unix Domain Socket client over stream
        1:  419:        char *socket_path = output_mode + 5;
        1:  420:        strcpy(unix_path, socket_path);
        1:  421:        printf("socket path: %s\n", socket_path);
        1:  422:        start_udsc_stream(output_fd, socket_path);
        -:  423:    }
        -:  424:    else
        -:  425:    {
        1:  426:        printf("Not a valid argument for output mode\n");
        1:  427:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  428:    }
        9:  429:}
        -:  430:
        -:  431:/**
        -:  432: * generic recv function, handles the input from the user or from the input stream.
        -:  433:*/
      114:  434:size_t generic_recv(int input_fd, char *input_mode, char *buffer, size_t buffer_size)
        -:  435:{
      114:  436:    size_t bytes_recv = 0;
      114:  437:    if (input_mode != NULL)
        -:  438:    {
       61:  439:        bytes_recv = recv(input_fd, buffer, BUFFER_SIZE, 0);
        -:  440:
       60:  441:        if (bytes_recv <= 0)
        -:  442:        {
       11:  443:            if (bytes_recv == 0)
        -:  444:            {
       11:  445:                fprintf(stderr, "Connection closed\n");
       11:  446:                close_fds(fds, fds_size, EXIT_FAILURE);
        -:  447:            }
        -:  448:            else
        -:  449:            {
    #####:  450:                perror("recv");
    #####:  451:                close_fds(fds, fds_size, EXIT_FAILURE);
        -:  452:            }
        -:  453:        }
        -:  454:    }
        -:  455:
        -:  456:    else
        -:  457:    { // means it is the standart stdin
       53:  458:        if (fgets(buffer, BUFFER_SIZE, stdin) == NULL)
        -:  459:        {
    #####:  460:            fprintf(stderr, "fgets error");
    #####:  461:            close_fds(fds, fds_size, EXIT_FAILURE);
        -:  462:        }
        -:  463:    }
      102:  464:    return bytes_recv;
        -:  465:}
        -:  466:
        -:  467:/**
        -:  468: * generic send function, handles the output to the user or to the output stream.
        -:  469:*/
       97:  470:size_t generic_send(int output_fd, char *output_mode, char *buffer, size_t bytes_to_send)
        -:  471:{
       97:  472:    size_t bytes_sent = 0;
       97:  473:    if (output_mode != NULL)
        -:  474:    {
       67:  475:        bytes_sent = send(output_fd, buffer, strlen(buffer), 0);
        -:  476:        if (bytes_sent < 0)
        -:  477:        {
        -:  478:            fprintf(stderr, "send error");
        -:  479:            close_fds(fds, fds_size, EXIT_FAILURE);
        -:  480:        }
       67:  481:        return bytes_sent;
        -:  482:    }
        -:  483:
        -:  484:    else
        -:  485:    { // means it is the stdout
       30:  486:        if ((bytes_sent = printf("%s\n",buffer)) < 0)
        -:  487:        {
        -:  488:            fprintf(stderr, "fputs error");
        -:  489:            close_fds(fds, fds_size, EXIT_FAILURE);
        -:  490:        }
       30:  491:        fflush(stdout);
        -:  492:    }
       30:  493:    return bytes_sent;
        -:  494:}
        -:  495:
        -:  496:/**
        -:  497: * main function, handling the command line arguments, and the communication between the user and the server/client.
        -:  498:*/
       59:  499:int main(int argc, char *argv[])
        -:  500:{
        -:  501:    int opt;
       59:  502:    char *executable = NULL;  // the executable to run
       59:  503:    char *input_mode = NULL;  // the input mode
       59:  504:    char *output_mode = NULL;  // the output mode
       59:  505:    char *timeout = NULL;  // the timeout
       59:  506:    int b_flag = 0;  // flag to check if the both mode was used
       59:  507:    int io_flag = 0;  // flag to check if the input/output mode was used
        -:  508:
        -:  509:    // Parse command line options
      134:  510:    while ((opt = getopt(argc, argv, "e:i:o:b:t:")) != -1)
        -:  511:    {
       76:  512:        switch (opt)
        -:  513:        {
       15:  514:        case 'e':
       15:  515:            executable = optarg;
       15:  516:            break;
        6:  517:        case 'i':
        6:  518:            input_mode = optarg;
        6:  519:            io_flag = 1;
        6:  520:            break;
       16:  521:        case 'o':
       16:  522:            output_mode = optarg;
       16:  523:            io_flag = 1;
       16:  524:            break;
       34:  525:        case 'b':
       34:  526:            input_mode = optarg;
       34:  527:            output_mode = optarg;
       34:  528:            b_flag = 1;
       34:  529:            break;
        4:  530:        case 't':
        4:  531:            timeout = optarg;
        4:  532:            break;
        1:  533:        default:
        1:  534:            fprintf(stderr, "Usage: %s -e \"executable arguments\" [-i input_mode] [-o output_mode] [-b both_mode]\n", argv[0]);
        1:  535:            close_fds(fds, fds_size, EXIT_FAILURE);
        -:  536:        }
        -:  537:    }
        -:  538:
        -:  539:    char *executable_name, *executable_arg;
        -:  540:    char *ttt_args[3];  // array to hold the arguments for the execv
        -:  541:
       58:  542:    if (b_flag && io_flag)  // if the both mode was used with the input/output mode
        -:  543:    {
        2:  544:        fprintf(stderr, "Usage: %s -e \"executable arguments\" [-i input_mode] [-o output_mode] [-b both_mode]\n", argv[0]);
        2:  545:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  546:    }
        -:  547:
        -:  548:    // Handle input & output redirections:
       56:  549:    int input_fd = -1, output_fd = -1;  // to store the input/output fds
       56:  550:    int tcp_server_in_fd = -1, tcp_server_out_fd = -1; // to store the listening sockets fd
        -:  551:
        -:  552:    // saving the fds in the fds array:
       56:  553:    fds[fds_size++] = input_fd;
       56:  554:    fds[fds_size++] = output_fd;
       56:  555:    fds[fds_size++] = tcp_server_in_fd;
       56:  556:    fds[fds_size++] = tcp_server_out_fd;
        -:  557:
        -:  558:    // Check if the user provided a timeout for TCP:
       56:  559:    if ((input_mode != NULL && strncmp(input_mode, "TCP", 3) == 0) || (output_mode != NULL && strncmp(output_mode, "TCP", 3) == 0))
        -:  560:    {
       28:  561:        if (timeout != NULL)
        -:  562:        {
        2:  563:            fprintf(stderr, "Timeout is not available for TCP\n");
        2:  564:            close_fds(fds, fds_size, EXIT_FAILURE);
        -:  565:        }
        -:  566:    }
        -:  567:
       54:  568:    if (input_mode != NULL)
        -:  569:    { // means the user passed -i or -b
       36:  570:        handle_i_args(input_mode, &input_fd, &tcp_server_in_fd);
        -:  571:    }
       45:  572:    if (b_flag)
        -:  573:    { // means the user passed -b
       22:  574:        output_fd = input_fd; // updating output_fd
        -:  575:    }
       23:  576:    else if (output_mode != NULL)
        -:  577:    { // means the user passed -o
       14:  578:        handle_o_args(output_mode, &output_fd, &tcp_server_out_fd);
        -:  579:    }
        -:  580:
        -:  581:    // handling the executable:
       40:  582:    if (executable != NULL)
        -:  583:    {
        -:  584:        // Separate executable and arguments
       11:  585:        executable_name = strtok(executable, " "); // first call
       11:  586:        executable_arg = strtok(NULL, " ");        // second call
        -:  587:
       11:  588:        if (executable_name == NULL || executable_arg == NULL)
        -:  589:        {
        2:  590:            fprintf(stderr, "Invalid format for -e option. Expected format: \"executable arguments\"\n");
        2:  591:            close_fds(fds, fds_size, EXIT_FAILURE);
        -:  592:        }
        -:  593:
        -:  594:        // Prepare arguments for execv
        9:  595:        ttt_args[0] = executable_name;
        9:  596:        ttt_args[1] = executable_arg;
        9:  597:        ttt_args[2] = NULL;
        -:  598:
        -:  599:        // redirecting the input/output streams to the executable:
        9:  600:        if (input_fd != -1)
        -:  601:        { // means there was assignition of input strem
        -:  602:            // original_input_fd = dup(STDIN_FILENO);
        5:  603:            if (dup2(input_fd, STDIN_FILENO) == -1)
        -:  604:            {
    #####:  605:                fprintf(stderr, "dup2 failed");
    #####:  606:                close_fds(fds, fds_size, EXIT_FAILURE);
        -:  607:            } // duplicate input_fd to be in stdin
        -:  608:        }
        9:  609:        if (output_fd != -1)
        -:  610:        { // means there was assignition of output strem
        -:  611:            // original_output_fd = dup(STDOUT_FILENO);
        7:  612:            if (dup2(output_fd, STDOUT_FILENO) == -1)
        -:  613:            {
    #####:  614:                fprintf(stderr, "dup2 failed");
    #####:  615:                close_fds(fds, fds_size, EXIT_FAILURE);
        -:  616:            } // duplicate output_fd to be in stdout
        -:  617:        }
        -:  618:
        -:  619:        // closing unneeded fds:
        9:  620:        if (input_fd != -1)
        -:  621:        {
        5:  622:            close(input_fd);
        5:  623:            fds[0] = -1;
        -:  624:        }
        9:  625:        if (output_fd != -1)
        -:  626:        {
        7:  627:            close(output_fd);
        7:  628:            fds[1] = -1;
        -:  629:        }
        9:  630:        if (tcp_server_in_fd != -1)
        -:  631:        {
        4:  632:            close(tcp_server_in_fd);
        4:  633:            fds[2] = -1;
        -:  634:        }
        9:  635:        if (tcp_server_out_fd != -1)
        -:  636:        {
        2:  637:            close(tcp_server_out_fd);
        2:  638:            fds[3] = -1;
        -:  639:        }
        -:  640:
        -:  641:        // Execute the new program
        9:  642:        execv(executable_name, ttt_args); // running the program with updated io streams
        9:  643:        perror("execv failed");
        1:  644:        close_fds(fds, fds_size, EXIT_FAILURE);
        -:  645:    }
        -:  646:
       29:  647:    signal(SIGALRM, handle_alarm);  // setting the alarm signal
        -:  648:
        -:  649:    char buffer[BUFFER_SIZE];  // buffer to hold the messages
       29:  650:    int timeout_int = -1;  // timeout in int
       29:  651:    if (timeout != NULL)
        -:  652:    {
        1:  653:        timeout_int = atoi(timeout);
        -:  654:    }
        -:  655:
       29:  656:    int flag = 0;  // flag to check if it is the first iteration
        -:  657:
       29:  658:    int isClient = 0, isServer = 0;  // flags to check if it is a client or a server
       29:  659:    if ((input_mode != NULL && input_mode[3] == 'C') || (output_mode != NULL && output_mode[3] == 'C'))
       17:  660:        isClient = 1;
       29:  661:    if((input_mode != NULL && input_mode[3] == 'S') || (output_mode != NULL && output_mode[3] == 'S'))
       10:  662:        isServer = 1;
        -:  663:
        -:  664:    // checking if the timeout is valid for the input/output mode (only for datagram mode)
       29:  665:    int valid_timeout_input = ((input_mode != NULL) && ((strncmp(input_mode, "UDP", 3) == 0) || (strncmp(input_mode, "UDSSD", 5) == 0)));
       29:  666:    int valid_timeout_output = ((output_mode != NULL) && ((strncmp(output_mode, "UDP", 3) == 0) || (strncmp(output_mode, "UDSCD", 5) == 0)));
        -:  667:
        -:  668:    // main loop to communicate between the user and the server/client:
        -:  669:    while (1)
        -:  670:    {
      126:  671:        if (isClient || flag)
        -:  672:        { // if it is a client or not the first iteration, we need to receive a message, and not to wait for the user to enter a message.
      114:  673:            size_t bytes_recv = 0;
      114:  674:            fflush(stdout);
        -:  675:            // recveiving msg:
      114:  676:            memset(buffer, 0, BUFFER_SIZE);
     114*:  677:            if ((timeout_int != -1) && (valid_timeout_input || valid_timeout_output))
        -:  678:            { // if it is datagram, we need to set a timeout
        3:  679:                signal(SIGALRM, handle_alarm);
        3:  680:                alarm(timeout_int);
        -:  681:            }
      114:  682:            bytes_recv = generic_recv(input_fd, input_mode, buffer, BUFFER_SIZE);
      102:  683:            alarm(0);
        -:  684:
      102:  685:            if (input_mode != NULL && bytes_recv > 0)
        -:  686:            { // means there was a message
       49:  687:                printf("%s\n", buffer); // printing msg to the terminal
        -:  688:            }
        -:  689:        }
        -:  690:
      114:  691:        flag = 1;
        -:  692:        // communicate user from original i/o:
      114:  693:        if(input_mode != NULL || isServer)
        -:  694:        {  // check if the user used stdin in the generic recv above.
       63:  695:            memset(buffer, 0, BUFFER_SIZE);
       63:  696:            printf("Enter message to send (or 'exit' to quit):\n");
       63:  697:            fgets(buffer, BUFFER_SIZE, stdin); // taking input from client's keyboard
        -:  698:        }
      114:  699:        buffer[strcspn(buffer, "\n")] = '\0'; // Remove newline character from buffer
      114:  700:        if (strcmp(buffer, "exit") == 0)
        -:  701:        { // Check if the user wants to exit
       17:  702:            close_fds(fds, fds_size, EXIT_SUCCESS);
        -:  703:        }
        -:  704:
        -:  705:        // Send message:
        -:  706:        // if ((timeout_int != -1) && (valid_timeout_input || valid_timeout_output))
        -:  707:        // { // if it is datagram, we need to set a timeout
        -:  708:        //     signal(SIGALRM, handle_alarm);
        -:  709:        //     alarm(timeout_int);
        -:  710:        // }
       97:  711:        generic_send(output_fd, output_mode, buffer, (size_t)strlen(buffer));
        -:  712:        // alarm(0);
        -:  713:    }
        -:  714:
        -:  715:    // closing fds:
        -:  716:    close_fds(fds, fds_size, EXIT_SUCCESS);
        -:  717:
        -:  718:    return 0;
        -:  719:}
